plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.3'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'com.diffplug.spotless' version '6.23.3'
	// aot
	id 'org.springframework.boot.aot' version '3.3.3'
	id 'org.asciidoctor.jvm.convert' version '3.3.2'

}

group = 'com.project'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	asciidoctorExtensions
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	// jpa
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	// querydsl
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	// swagger
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'

	// h2
	runtimeOnly 'com.h2database:h2'
	testRuntimeOnly 'com.h2database:h2'
	// postgresql //
	runtimeOnly 'org.postgresql:postgresql'


	// jwt
	//JJWT
	implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.3'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.3'
	// speed json
	implementation 'com.fasterxml.jackson.module:jackson-module-afterburner:2.15.0'
	// spotless
	implementation 'com.diffplug.spotless:spotless-plugin-gradle:6.23.3'
	// rest docs
	asciidoctorExtensions 'org.springframework.restdocs:spring-restdocs-asciidoctor'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'


}

def queryDslSrcDir = 'src/main/generated'

tasks.named('test') {
	useJUnitPlatform()
}

clean {
	delete file(queryDslSrcDir)
}

tasks.withType(JavaCompile) {
	options.generatedSourceOutputDirectory = file(queryDslSrcDir)
}

spotless {
	java {
		target fileTree('src/main/java').exclude('**/generated/**')
		googleJavaFormat().aosp()
		importOrder 'java', 'javax', 'lombok', 'jakarta', 'org', 'com'
		removeUnusedImports()
		trimTrailingWhitespace()
		endWithNewline()
	}
}

tasks.register('updateGitHooks', Copy) {
	from new File(project.rootDir, 'scripts/pre-commit')
	into new File(project.rootDir, '.git/hooks')
}

tasks.register('makeGitHooksExecutable', Exec) {
	commandLine 'chmod', '+x', new File(project.rootDir, '.git/hooks/pre-commit').absolutePath
	dependsOn updateGitHooks
}

compileJava.dependsOn makeGitHooksExecutable

ext {
	snippetsDir = file('build/generated-snippets')
}
asciidoctor {
	configurations 'asciidoctorExtensions'
	inputs.dir snippetsDir
	sources {
		include("**/index.adoc")
	}
	baseDirFollowsSourceFile()
	dependsOn test
}

asciidoctor.doFirst {
	delete file('src/main/resources/static/docs/index.html')
}

task copyRestDocument(type: Copy) {
	dependsOn asciidoctor
	from file("${asciidoctor.outputDir}")
	into file("src/main/resources/static/docs")
}

bootJar {
	dependsOn copyRestDocument
	duplicatesStrategy = DuplicatesStrategy.INCLUDE
	from("src/main/resources/static/docs") {
		into "BOOT-INF/classes/static/docs"
	}
}

processAot {
	doFirst {
		def profile = project.hasProperty('spring.profiles.active') ? project.getProperty('spring.profiles.active') : 'sandbox'
		args("--spring.profiles.active=${profile}")
	}
}